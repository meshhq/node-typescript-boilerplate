#!/usr/bin/env node
'use strict'

// Load ENVs
const dotENV = require('dotenv')
dotENV.config()

//module dependencies
const server = require('../dist/server')
const debug = require('debug')('express:server')
const http = require('http')

//create http server
const httpPort = normalizePort(process.env.PORT || 8080)
const app = server.default.bootstrap()
app.set('port', httpPort)

let httpServer
// Check NODE_ENV is set
if (!process.env.NODE_ENV || process.env.NODE_ENV === '') {
  console.error('üò°  NODE_ENV needs to be set')
  process.exit(1)
} else {
  httpServer = http.createServer(app)
}


//listen on provided ports
httpServer.listen(httpPort)

//add error handler
httpServer.on('error', onError)

//start listening on port
httpServer.on('listening', onListening)


/**
 * Normalize a port into a number, string, or false.
 * 
 * @param val The port value to use
 */
function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 * 
 * @param error The error that triggered this
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/** Event listener for HTTP server "listening" event. */
function onListening() {
  const addr = httpServer.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
  console.log('‚ö°Ô∏è‚ö°Ô∏è  CommitHub Listening On: ' + bind)
}
